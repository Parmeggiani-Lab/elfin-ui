#!/bin/bash

echo
echo "Installing the Elfin Blender addon."
echo

# Fetch library files if not already fetched
elfin_dir="elfin"
if [[ ! -f $elfin_dir/library.blend ]] || [[ ! -f $elfin_dir/xdb.json ]]; then
    ./fetch_library
fi

OS=${OS:-$(uname -s)}

if [[ $OS == "Darwin" ]]; then
    echo "OS: MacOS"
    BL_DIR=${BL_DIR:-"$HOME/Library/Application Support/Blender/"}  
elif [[ $OS == "Linux" ]]; then
    if [[ "$(cat /proc/version)" =~ "Microsoft" ]]; then 
        echo "OS: Linux (WSL)"
        OS="WSL"
        win_user_dir=$(wslpath $(cmd.exe /c "echo %USERPROFILE%" | sed -e 's/\r//g'))
        BL_DIR=$win_user_dir"/AppData/Roaming/Blender Foundation/Blender/"
    else
        echo "OS: Linux"
        BL_DIR=$HOME/.config/blender/
    fi
else
    echo "OS: $OS"
    if [[ -z $BL_DIR ]]; then
        echo "Could not guess Blender directory."
        echo "Please provide your Blender path (without the version directory):"
        read -r BL_DIR
    fi
fi

BL_DIR="${BL_DIR//\'/}"

print_fail_guide(){
    echo
    echo "If you really have Blender installed, do the following:"
    echo "  1. Open Blender"
    echo "  2. Go to \"File\" > \"User Preferences\""
    echo "  3. Hit \"Save User Preferences\"."
    echo 
    echo "This should create a user profile directory where elfin-ui can be installed to."
    echo 
}

if [[ ! -d $BL_DIR ]]; then
    echo 
    echo "Unable to install! Reason: "
    echo "  Blender directory \"$BL_DIR\" does not exist."
    print_fail_guide
    exit 1
fi

# Prevent path spaces from breaking ls output into separate elements
IFS='
'
bl_vers=()
for folder in "$BL_DIR"*/; do
    # Regex match num dot num as version string
    if [[ $(basename $folder) =~ ^[0-9]+\.[0-9]+$ ]]; then
        bl_vers+=($folder)
    fi
done
n_vers=${#bl_vers[@]}

if [[ $n_vers -eq 0 ]]; then
    echo 
    echo "Unable to install! Reason: "
    echo "  No Blender versions could be found."
    print_fail_guide
    exit 1
fi

for i in `seq 1 $n_vers`; do
    echo "[${i}] " $(basename ${bl_vers[$(expr ${i} - 1)]})
done

echo "Which version of Blender should Elfin be installed to? Choose [1-${n_vers}]"
read ver_id
if [[ $ver_id -le $n_vers ]] && [[ $ver_id -gt 0 ]]; then
    version=${bl_vers[$(expr ${ver_id} - 1)]}
    bl_addon_path=${version}/scripts/addons/
    echo "Will symlink elfin into ${bl_addon_path}"
else
    echo "Selection invalid"
    exit 1
fi

# MacOS does not have realpath() so we define it here
realpath() {
    [[ $1 = /* ]] && echo "$1" || echo "$PWD/${1#./}"
}

# WSL does not intepret ln -s properly on Windows' native filesystem
link() {
    if [[ $OS == "WSL" ]]; then
        cmd.exe /c mklink /D "$(wslpath -w ${2})" "$(wslpath -w ${1})"
    else
        ln -s $1 $2
    fi
}

source_path=$(realpath "$elfin_dir/")
bl_addon_real_path=$(realpath "$bl_addon_path")
mkdir -p $bl_addon_real_path

dest_path="$bl_addon_real_path/$elfin_dir"
if [[ -d $dest_path || -f $dest_path ]]; then
	echo ""
	read -e -p "Overwrite existing link? [Y/n]" YN
	if [[ $YN != "y" && $YN != "Y" && $YN != "" ]]; then
		echo 'Aborting.'
		exit 0
	fi

	rm -rf $dest_path
fi

link "$source_path" "$dest_path"